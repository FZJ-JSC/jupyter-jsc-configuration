#!/bin/bash
UUID=$(python3 -c "import uuid; print(uuid.uuid4().hex)")
PROJECT_HOME="/home/jovyan/Projects"
PROJECT_API="http://${REMOTE_NODE}:${REMOTE_HUB_PORT}/hub/api/projects/hdfcloud"
PROJECT_SHARES_API="http://${REMOTE_NODE}:${REMOTE_HUB_PORT}/hub/api/project_shares/hdfcloud"
PREACTIONS=("My projects" "Projects shared with me")
ACTIONS=("List all my projects" "Create a new project" "Manage project" "Delete a project")

TMP=$(curl -X "GET" -H "uuidcode: $UUID" -H "Authorization: token ${JUPYTERHUB_API_TOKEN}" ${PROJECT_API} 2> /dev/null)
NAMES=$(python3 -c 'import json,sys; d=json.loads(sys.argv[1]); print(" ".join(d));' "$TMP")
ARRAY=( $NAMES )
select PREACTION_ONE in "${PREACTIONS[@]}"
do
        if [ ${#PREACTION_ONE} -eq 0 ]; then
                echo "Please choose a valid action."
        else
                break
        fi
done
if [[ ${PREACTION_ONE} == "My projects" ]]; then
select ACTION_ONE in "${ACTIONS[@]}"
do
        if [ ${#ACTION_ONE} -eq 0 ]; then
                echo "Please choose a valid action."
        else
                break
        fi
done
if [[ ${ACTION_ONE} == "List all my projects" ]]; then
	if [[ -z ${NAMES} ]]; then
                echo "You don't have any projects. Exit program."
                exit 0
	else
		( IFS=$'\n'; echo "${ARRAY[*]}" )
	fi
elif [[ ${ACTION_ONE} == "Create a new project" ]]; then
	while [ 0 ]
	do
	    	read -p "Please define a name for your new project: " -r
	    	if [ ${#REPLY} -eq 0 ]; then
		    	echo "Entered empty string. Exit program."
		    	exit 0
            	elif [ -d ${PROJECT_HOME}/${REPLY} ]; then
		    	echo "The project already exists."
	    	else
        
		    	EC=$(curl -o /dev/null -s -w "%{http_code}\n" -X "POST" -H "uuidcode: $UUID" -H "Authorization: token ${JUPYTERHUB_API_TOKEN}" ${PROJECT_API}/${REPLY} 2> /dev/null)
		    	if [[ $EC -eq 200 ]]; then
				mkdir -p ${PROJECT_HOME}/${REPLY}
    		            	echo "${REPLY} created at ${PROJECT_HOME}/${REPLY} ."
	   	    		exit 0
			elif [[ $EC -eq 409 ]]; then
				echo "Project already exists in database."
				exit 1
			else
				echo "Something went wrong. Exit Code: ${EC}"
				exit 1
			fi
	  	fi
	done
elif [[ ${ACTION_ONE} == "Manage project" ]]; then
	if [[ -z ${NAMES} ]]; then
                echo "You don't have any projects. Exit program."
                exit 0
	elif [ ${#ARRAY[@]} -eq 1 ]; then
		echo "Manage your project ${ARRAY[0]}"
		PROJECT=${ARRAY[0]}
	else
		echo "You have ${#ARRAY[@]} projects. Which one do you want to manage?"
		select PROJECT in "${ARRAY[@]}"
	       	do 
			if [ ${#PROJECT} -eq 0 ]; then
				echo "Please choose a project."
			else
				break
			fi
	       	done
	fi
	echo "What do you want to do for ${PROJECT}?"
	ACTIONS_FULL=("Add user" "Get a list of all users" "Remove user" "Remove all user")
	select ACTION in "${ACTIONS_FULL[@]}"
	do
		if [ ${#ACTION} -eq 0 ]; then
			echo "Please choose a valid action."
		else
			break
		fi
	done
	if [ "${ACTION}" == "Add user" ]; then
		while [ 0 ]; do
   		        read -p "Please enter the email address of the user: " -r
			if [ ${#REPLY} -eq 0 ]; then
				exit 0
			else
		    		EC=$(curl -o /dev/null -s -w "%{http_code}\n" -X "POST" -H "Authorization: token ${JUPYTERHUB_API_TOKEN}" ${PROJECT_SHARES_API}/${PROJECT}/${REPLY} 2> /dev/null)
				if [[ $EC -eq 404 ]]; then
					echo "User ${REPLY} not found. Please try again."
				elif [[ $EC -eq 200 ]]; then
					echo "User ${REPLY} added. You'll be able to add another user (empty to quit)."
				fi
			fi
		done
	elif [ "${ACTION}" == "Get a list of all users" ]; then
		TMP=$(curl -X "GET" -H "Authorization: token ${JUPYTERHUB_API_TOKEN}" ${PROJECT_API}/${PROJECT} 2> /dev/null)
		EC=$?
		if [[ ! $EC -eq 0 ]]; then
			echo "Something went wrong. Exit Code: $EC"
			exit 1
		fi
                OUTPUT=$(python3 -c 'import json,sys; d=json.loads(sys.argv[1]); print(" ".join(d));' "$TMP")
		echo $OUTPUT
	elif [ "${ACTION}" == "Remove user" ]; then
                while [ 0 ]; do
                        read -p "Please enter the email address of the user: " -r
                        if [ ${#REPLY} -eq 0 ]; then
                                exit 0
                        else
		                curl -X "DELETE" -H "Authorization: token ${JUPYTERHUB_API_TOKEN}" ${PROJECT_SHARES_API}/${PROJECT}/${REPLY} 2> /dev/null
				EC=$?
				if [[ $EC -eq 0 ]]; then
					echo "User ${REPLY} removed."
                                        exit 0
				else
					echo "Could not delete user ${REPLY}. Exit Code: ${EC}."
                                        exit 1
				fi
                        fi
                done
	elif [ "${ACTION}" == "Remove all user" ]; then
		curl -X "DELETE" -H "Authorization: token ${JUPYTERHUB_API_TOKEN}" ${PROJECT_SHARES_API}/${PROJECT} 2> /dev/null
		EC=$?
		if [[ $EC -eq 0 ]]; then
			echo "All users removed."
                        exit 0
		else
			echo "Could not remove users. Exit Code: ${EC}."
                        exit 1
		fi
	else
		echo "${ACTION} is not implemented yet."
	fi
elif [ "${ACTION_ONE}" == "Delete a project" ]; then
	if [[ -z ${NAMES} ]]; then
                echo "You don't have any projects. Exit program."
                exit 0
	elif [ ${#ARRAY[@]} -eq 1 ]; then
		PROJECT=${ARRAY[0]}
	else
		echo "You have ${#ARRAY[@]} projects. Which one do you want to manage?"
		select PROJECT in "${ARRAY[@]}"
	       	do 
			if [ ${#PROJECT} -eq 0 ]; then
				echo "Please choose a project."
			else
				break
			fi
	       	done
	fi
        echo "Are you sure you want to delete ${PROJECT}? All files in your folder /home/jovyan/Projects/${PROJECT} will be deleted."
        read -p "Do you want to proceed? (y/n) " -r
	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		echo "${PROJECT} will not be deleted."
		exit 0
	fi
	curl -X "DELETE" -H "uuidcode: $UUID" -H "Authorization: token ${JUPYTERHUB_API_TOKEN}" ${PROJECT_API}/${PROJECT} 2> /dev/null
	EC=$?
	if [[ $EC -eq 0 ]]; then
		rm -rf /home/jovyan/Projects/${PROJECT}
		echo "Project ${PROJECT} deleted."
                exit 0
	else
		echo "Could not delete project. Please remove /home/jovyan/Projects/${PROJECT} manually. Exit Code: ${EC}."
                exit 1
	fi
else
	echo "${ACTION_ONE} is not a solid answer. Please answer with \"1\" or \"2\"."
fi
elif [ "${PREACTION_ONE}" == "Projects shared with me" ]; then
        SHAREDACTIONS=("List shared projects" "Remove me from project")
	select ACTION in "${SHAREDACTIONS[@]}"
	do 
		if [ ${#ACTION} -eq 0 ]; then
			echo "Please choose a valid action."
		else
			break
		fi
	done
	if [ "${ACTION}" == "List shared projects" ]; then
		TMP=$(curl -X "GET" -H "uuidcode: $UUID" -H "Authorization: token $JUPYTERHUB_API_TOKEN" ${PROJECT_SHARES_API} 2> /dev/null)
                OUTPUT=$(python3 -c 'import json,sys; d=json.loads(sys.argv[1]); print(" ".join(d));' "$TMP")
		if [[ -z $OUTPUT ]]; then
			echo "There are no projects shared with you."
		else
			echo $OUTPUT
		fi
	elif [ "${ACTION}" == "Remove me from project" ]; then
		echo "Which project?"
		TMP=$(curl -X "GET" -H "uuidcode: $UUID" -H "Authorization: token $JUPYTERHUB_API_TOKEN" ${PROJECT_SHARES_API} 2> /dev/null)
                OUTPUT=$(python3 -c 'import json,sys; d=json.loads(sys.argv[1]); print(" ".join(d));' "$TMP")
		if [[ -n $OUTPUT ]]; then
			select PROJECT in "${OUTPUT[@]}"
		       	do 
				if [ ${#PROJECT} -eq 0 ]; then
					echo "Please choose a project."
				else
					break
				fi
		       	done
	        	curl -X "DELETE" -H "uuidcode: $UUID" -H "Authorization: token ${JUPYTERHUB_API_TOKEN}" ${PROJECT_SHARES_API}/${PROJECT} 2> /dev/null
		else
			echo "There are no projects shared with you."
		fi
	else
		echo "${ACTION} not a solid answer."
	fi
else
	echo "${PREACTION_ONE} is not a solid answer. Please answer with \"1\" or \"2\"."
fi
